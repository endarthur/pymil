#!/usr/bin/python
# -*- coding: utf-8 -*-

#==============================================================================#
#      pymil - Open-source Carte internationale du Monde au Millioni√®me        #
#                               Scale Codec                                    #
#                                                                              #
#    Copyright (c)  2012 Arthur Endlein.                                       #
#                                                                              #
#                                                                              #
#    This file is part of pymil.                                               #
#                                                                              #
#    pymil is free software: you can redistribute it and/or modify             #
#    it under the terms of the GNU General Public License as published by      #
#    the Free Software Foundation, either version 3 of the License, or         #
#    (at your option) any later version.                                       #
#                                                                              #
#    pymil is distributed in the hope that it will be useful,                  #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of            #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the             #
#    GNU General Public License for more details.                              #
#                                                                              #
#    You should have received a copy of the GNU General Public License         #
#    along with pymil.  If not, see <http://www.gnu.org/licenses/>.            #
#                                                                              #
#                                                                              #
#==============================================================================#

import os, os.path, shutil
import osgeo.ogr
import osgeo.osr


def make_shape(minLon, maxLon, minLat, maxLat, cimCode, dstPath):
    
    spatialReference = osgeo.osr.SpatialReference()
    spatialReference.SetWellKnownGeogCS('WGS84')
    driver = osgeo.ogr.GetDriverByName("ESRI Shapefile")
    dstFile = driver.CreateDataSource(dstPath)
    dstLayer = dstFile.CreateLayer("layer", spatialReference)
    
    fieldDef = osgeo.ogr.FieldDefn("CIMCODE", osgeo.ogr.OFTString)
    fieldDef.SetWidth(20)
    dstLayer.CreateField(fieldDef)
    
    linearRing = osgeo.ogr.Geometry(osgeo.ogr.wkbLinearRing)
    linearRing.AddPoint(minLon, minLat)
    linearRing.AddPoint(maxLon, minLat)
    linearRing.AddPoint(maxLon, maxLat)
    linearRing.AddPoint(minLon, maxLat)
    linearRing.AddPoint(minLon, minLat)
    polygon = osgeo.ogr.Geometry(osgeo.ogr.wkbPolygon)
    polygon.AddGeometry(linearRing)
    print minLon, maxLon, minLat, maxLat
    
    feature = osgeo.ogr.Feature(dstLayer.GetLayerDefn())
    feature.SetGeometry(polygon)
    
    feature.SetField("CIMCODE", cimCode)
    
    dstLayer.CreateFeature(feature)
    
    feature.Destroy()
    
    dstFile.Destroy()
    
def usage():
    print """cim2shp [--help] [--code XX-X-XX-...] [--latlon xxx,yyy] [--scale 1m|500k|250k|100k|50k|25k|10k] outfile

Generates a bounding box shapefile for the limits of the given CIM code or latitude longitude pair + desired scale."""

def main(argv):
    from pymil import code
    import getopt
    
    try:                                
        opts, args = getopt.getopt(argv, "hbc:l:s:", ["help", "code=", "latlon=", "scale="]) 
    except getopt.GetoptError:           
        usage()                          
        sys.exit(2)
    if not (args or opts):
        usage()
        sys.exit()
    for o, a in opts:
        if o in ("-c", "--code"):
            from pymil.cim import bounding_coordinates
            hemisphere = a[0]
            zone = a[1]
            fuse = a[3:5]
            scale_code = a[6:].split("-")
            #~ print "parsed code", scale_code
            coords = bounding_coordinates(scale_code, zone, fuse, hemisphere)
        if o in ("-nl", "--latlon"):
            #~ norm = True
            lat, lon = a.split(",")
        elif o in ("-s", "--scale"):
            ccoder = code(-22.5, -47.7)
            coords, scale_code = ccoder[a]
        elif o in ("-h", "--help"):
            usage()
            sys.exit()
    make_shape(*coords, cimCode="-".join(scale_code), dstPath=args[0])

if __name__=="__main__":
    import sys
    main(sys.argv[1:])
